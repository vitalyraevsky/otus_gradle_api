import ru.otus.gradleotus.AppConfig

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)

/*
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
*/
    id 'SimplePlugin'
}

apply from: "$project.rootDir/buildScripts/android_config.gradle"
apply from: "$project.rootDir/buildScripts/deps.gradle"

android {
    compileSdk libs.versions.compileSdk.get() as Integer
    //compileSdk AppConfig.androidConpileSdk
    //compileSdk androidConpileSdk

    signingConfigs {

    }

    defaultConfig {
        applicationId "ru.otus.gradleotus"
        minSdk androidMinSdk
        targetSdk androidTargetSdk
        //minSdk libs.versions.minSdk.get() as Integer
        //targetSdk libs.versions.targetSdk.get() as Integer

        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {

        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }

    flavorDimensions "service" , "type"
    productFlavors {
        google {
            dimension "service"

        }
        huawei {
            dimension "service"

        }
        free {
            dimension "type"

        }
        paid {
            dimension "type"

        }
    }
}

dependencies {
    //implementation project(":core")

    implementation projects.core
    implementation libs.androidx.core

    implementation libs.bundles.androidx

    //implementation AndroidXDeps.core

    //implementation AndroidXDeps.all()
/*
    implementation materialDependency
    implementation androidXDependencies.values()
*/
/*
    implementation 'androidx.core:core-ktx:1.9.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.8.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
*/

/*    debugImplementation "myLib-snapshot"
    releaseImplementation "myLib"

    googlePaidImplementation "myLib"
    huaweiFreeImplementation "myLib-huawei"*/

    /*

    implementation project(':mylibrary')

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.core:core-ktx:1.9.0'


    implementation('some-library') {
        exclude group: 'com.example.imgtools', module: 'native'
    }
*/

    //debugImplementation 'some-snapshot-library'
    //releaseImplementation 'some-library'

    //freeImplementation project(':freeModule')
    //paidImplementation project(':paidModule')

/*    implementation projects.module

    implementation androidxCoreKtxDependency

    implementation libs.androidx.core

    implementation libs.bundles.androidx
    */

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}


tasks.register("hello") {
    println("Hello from config")
    mustRunAfter "clearHello"
    group = "otus"
    doFirst {
        println("Hello from action")
    }
}

def someBoolean = false

tasks.register("clearHello") {
    onlyIf {
        someBoolean
    }
    group = "otus"
    doFirst {
        println("Hello from clear")
    }
}

tasks.register("world") {
    group = "otus"
    dependsOn "hello"
    finalizedBy "try"
    doFirst {
        println("Hello from world")
        throw new RuntimeException("We failed :(")
    }
}

tasks.register("try") {
    group = "otus"
    doFirst {
        println("Hello from try anyway")
    }
}

tasks.register("proxy") {
    group = "otus"
    dependsOn "world"
    dependsOn "try"
}

tasks.named("proxy").configure {
    enabled = false
}

//------


tasks.register("hello") {
    doLast {
        println "Hello world!"
    }
    doFirst {
        println "So"
    }
}

tasks.register("challenge") {
    doFirst {
        println "1 starting task challenge"
    }
    doFirst {
        println "2 starting task challenge"
    }
    doFirst {
        println "3 starting task challenge"
    }
    doLast {
        println "1 finishing task challenge"
    }
    doLast {
        println "2 finishing task challenge"
    }
    doLast {
        println "3 finishing task challenge"
    }
}


tasks.register("exception_task") {
    group = "Lesson"
    finalizedBy finalized_task
    doFirst {
        throw new RuntimeException("We failed :(")
        println("Unreacheble")
    }
}

tasks.register("finalized_task") {
    group = "Lesson"
    doFirst {
        println("Task executed anyway")
    }
}

def someBoolean = false

tasks.register("only_task") {
    group = "Lesson"
    onlyIf {
        someBoolean
    }
    doFirst {
        println("Task executed")
    }
}

tasks.register("alter_only_task") {
    group = "Lesson"
    dependsOn "only_task"
    doFirst {
        println("Task alter executed")
    }
}

tasks.named("alter_only_task").configure {
    enabled = false
    doLast {
        println("Task alter executed Last")
    }
}


tasks.register('OTUSprint2') {
    group = "Otus"
    doFirst {
        println "Otus 2 first"
    }
    doLast {
        println "Otus 2 last"
    }
}

tasks.register('OTUSprint') {
    dependsOn "OTUSprint2"
    group = "Otus"
    doFirst {
        println "Otus"
    }
}

tasks.register('hello_ext') {
    mustRunAfter OTUSprint
    doLast {
        println 'Hello world!'
    }
}